{"version":3,"sources":["scoreBoard.js","board.js","startButton.js","directionButton.js","game.js","customHook.js","App.js","reportWebVitals.js","index.js"],"names":["ScoreBoard","score","className","Board","width","height","snake","food","headDirectionClass","columnArr","Array","fill","i","length","rowArr","foodX","foodY","forEach","snakeArr","index","snakeX","snakeY","map","column","x","cell","y","k","StartButton","displayStartButton","startGame","type","onClick","DirectionButton","handleDirectionBtn","startFromHere","controlRandomFood","Math","floor","random","undefined","find","element","isGameOver","newHead","overBorder","touchBody","e","Game","useState","setScore","setFood","setSnake","direction","setDirection","delay","setDelay","setDisplayStartButton","setHeadDirectionClass","callback","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","head","newSnake","slice","eatFood","nextFood","unshift","pop","handle","document","addEventListener","removeEventListener","useListener","code","App","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.52e90ef1.chunk.js","sourcesContent":["import React from 'react';\n\nfunction ScoreBoard({ score }) {\n  return (\n    <div className=\"scoreBoard\">\n      Score\n      <span>{score}</span>\n    </div>\n  );\n}\n\nexport default ScoreBoard;\n","import React from 'react';\n\nfunction Board({ width, height, snake, food, headDirectionClass }) {\n  const columnArr = new Array(width).fill(null);\n  for (let i = 0; i < columnArr.length; i++) {\n    const rowArr = new Array(height).fill(null);\n    columnArr[i] = rowArr;\n  }\n\n  const isFood = 1;\n  const isSnake = 2;\n  const isSnakeHead = 3;\n  const [foodX, foodY] = food;\n  columnArr[foodX][foodY] = isFood;\n\n  snake.forEach((snakeArr, index) => {\n    const [snakeX, snakeY] = snakeArr;\n    if (index === 0) {\n      columnArr[snakeX][snakeY] = isSnakeHead;\n    } else {\n      columnArr[snakeX][snakeY] = isSnake;\n    }\n  });\n\n  return (\n    <div className=\"board\">\n      {columnArr.map((column, x) => {\n        return column.map((cell, y) => {\n          const k = `${x}${y}`;\n          if (cell === isFood) {\n            return <div key={k} className=\"unit food\"></div>;\n          }\n          if (cell === isSnake) {\n            return <div key={k} className=\"unit snake\"></div>;\n          }\n          if (cell === isSnakeHead) {\n            return (\n              <div\n                key={k}\n                className={`unit snakeHead ${headDirectionClass}`}\n              ></div>\n            );\n          }\n          return <div key={k} className=\"unit\"></div>;\n        });\n      })}\n    </div>\n  );\n}\n\nexport default Board;\n","import React from 'react';\n\nfunction StartButton({ displayStartButton, startGame }) {\n  return (\n    <div className={displayStartButton}>\n      <button type=\"button\" className=\"startButton\" onClick={startGame}>\n        start\n      </button>\n    </div>\n  );\n}\n\nexport default StartButton;\n","import React from 'react';\n\nfunction DirectionButton({ handleDirectionBtn }) {\n  return (\n    <div className=\"directionBtn\">\n      <button\n        onClick={() => handleDirectionBtn('ArrowUp')}\n        className=\"btnStyle arrowUp\"\n        type=\"button\"\n      ></button>\n      <div className=\"leftRight\">\n        <button\n          onClick={() => handleDirectionBtn('ArrowLeft')}\n          className=\"btnStyle arrowLeft\"\n          type=\"button\"\n        ></button>\n        <button\n          onClick={() => handleDirectionBtn('ArrowRight')}\n          className=\"btnStyle arrowRight\"\n          type=\"button\"\n        ></button>\n      </div>\n      <button\n        onClick={() => handleDirectionBtn('ArrowDown')}\n        className=\"btnStyle arrowDown\"\n        type=\"button\"\n      ></button>\n    </div>\n  );\n}\n\nexport default DirectionButton;\n","import React, { useState } from 'react';\nimport ScoreBoard from './scoreBoard';\nimport Board from './board';\nimport StartButton from './startButton';\nimport DirectionButton from './directionButton';\nimport { useInterval, useListener } from './customHook';\n\nconst width = 15;\nconst height = 15;\nconst startFromHere = [\n  [7, 4],\n  [6, 4],\n  [5, 4],\n];\n\nfunction Game() {\n  const [score, setScore] = useState(0);\n  const [food, setFood] = useState([10, 10]);\n  const [snake, setSnake] = useState(startFromHere);\n  const [direction, setDirection] = useState([1, 0]);\n  const [delay, setDelay] = useState(null);\n  const [displayStartButton, setDisplayStartButton] = useState('fullPage');\n  const [headDirectionClass, setHeadDirectionClass] = useState('turnRight');\n\n  const startGame = () => {\n    setDisplayStartButton('hidden');\n    setDelay(300);\n    setSnake(startFromHere);\n    setFood([10, 10]);\n    setScore(0);\n    setDirection([1, 0]);\n    setHeadDirectionClass('turnRight');\n  };\n\n  useInterval(() => {\n    const head = snake[0];\n    const newHead = [head[0] + direction[0], head[1] + direction[1]];\n    const newSnake = snake.slice();\n    const eatFood = newHead[0] === food[0] && newHead[1] === food[1];\n\n    if (isGameOver(newHead, snake)) {\n      setDelay(null);\n      setDisplayStartButton('fullPage');\n      return;\n    }\n    if (eatFood) {\n      const nextFood = controlRandomFood(snake);\n      setScore(score + 1);\n      setFood(nextFood);\n      newSnake.unshift(newHead);\n      if (score % 3 === 0) {\n        setDelay(delay - 20);\n      }\n    } else {\n      newSnake.unshift(newHead);\n      newSnake.pop();\n    }\n    setSnake(newSnake);\n  }, delay);\n\n  useListener('keydown', (e) => {\n    handleDirectionBtn(e.code);\n  });\n\n  const handleDirectionBtn = (code) => {\n    switch (code) {\n      case 'ArrowUp':\n        if (direction[0] !== 0) {\n          setDirection([0, -1]);\n          setHeadDirectionClass('up');\n        }\n        break;\n      case 'ArrowDown':\n        if (direction[0] !== 0) {\n          setDirection([0, 1]);\n          setHeadDirectionClass('down');\n        }\n        break;\n      case 'ArrowLeft':\n        if (direction[1] !== 0) {\n          setDirection([-1, 0]);\n          setHeadDirectionClass('turnLeft');\n        }\n        break;\n      case 'ArrowRight':\n        if (direction[1] !== 0) {\n          setDirection([1, 0]);\n          setHeadDirectionClass('turnRight');\n        }\n        break;\n    }\n  };\n\n  return (\n    <div className=\"game\">\n      <ScoreBoard score={score} />\n      <Board\n        width={width}\n        height={height}\n        snake={snake}\n        food={food}\n        headDirectionClass={headDirectionClass}\n      />\n      <DirectionButton handleDirectionBtn={handleDirectionBtn} />\n      <StartButton\n        startGame={startGame}\n        displayStartButton={displayStartButton}\n      />\n    </div>\n  );\n}\n\nconst controlRandomFood = (snake) => {\n  for (;;) {\n    let x = Math.floor(Math.random() * width);\n    let y = Math.floor(Math.random() * height);\n    const found = snake.find((element) => {\n      if (element[0] === x && element[1] === y) {\n        return true;\n      }\n    });\n    if (found === undefined) {\n      return [x, y];\n    }\n  }\n};\n\nconst isGameOver = (newHead, snake) => {\n  const borderWidth = width - 1;\n  const borderHeight = height - 1;\n  const overBorder =\n    newHead[0] > borderWidth ||\n    newHead[0] < 0 ||\n    newHead[1] > borderHeight ||\n    newHead[1] < 0;\n  const touchBody = snake.find((e) => {\n    if (e[0] === newHead[0] && e[1] === newHead[1]) {\n      return true;\n    }\n    return false;\n  });\n  return overBorder || touchBody;\n};\n\nexport default Game;\n","import { useEffect, useRef } from 'react';\n\nconst useInterval = (callback, delay) => {\n  const savedCallback = useRef();\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    const tick = () => {\n      savedCallback.current();\n    };\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n};\n\nconst useListener = (type, callback) => {\n  const savedCallback = useRef();\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    const handle = (e) => {\n      savedCallback.current(e);\n    };\n    document.addEventListener(type, handle);\n    return () => document.removeEventListener(type, handle);\n  }, [type]);\n};\n\nexport { useInterval, useListener };\n","import './App.css';\nimport React from 'react';\nimport Game from './game';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <a href=\"https://github.com/jundesu/snake_game\">Fork me on Github</a>\n      <Game />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}