{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["startFromHere","Game","useState","score","setScore","food","setFood","snake","setSnake","direction","setDirection","delay","setDelay","displayStartButton","setDisplayStartButton","headDirectionClass","setHeadDirectionClass","useInterval","head","newHead","newSnake","slice","eatFood","isGameOver","nextFood","controlRandomFood","unshift","pop","useListener","e","handleDirectionBtn","code","className","ScoreBoard","Board","DirectionButton","StartButton","startGame","props","columnArr","Array","fill","i","length","rowArr","foodX","foodY","forEach","snakeArr","index","snakeX","snakeY","map","column","x","cell","y","k","onClick","callback","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","type","handle","document","addEventListener","removeEventListener","Math","floor","random","undefined","find","element","overBorder","width","height","touchBody","App","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.5d5083c3.chunk.js","sourcesContent":["import './App.css';\nimport React, { useEffect, useState, useRef } from 'react';\n\nconst width = 15;\nconst height = 15;\nconst startFromHere = [\n  [7, 4],\n  [6, 4],\n  [5, 4],\n];\n\nfunction Game() {\n  const [score, setScore] = useState(0);\n  const [food, setFood] = useState([10, 10]);\n  const [snake, setSnake] = useState(startFromHere);\n  const [direction, setDirection] = useState([1, 0]);\n  const [delay, setDelay] = useState(null);\n  const [displayStartButton, setDisplayStartButton] = useState('fullPage');\n  const [headDirectionClass, setHeadDirectionClass] = useState('turnRight');\n\n  const startGame = () => {\n    setDisplayStartButton('hidden');\n    setDelay(300);\n    setSnake(startFromHere);\n    setFood([10, 10]);\n    setScore(0);\n    setDirection([1, 0]);\n    setHeadDirectionClass('turnRight');\n  };\n\n  useInterval(() => {\n    const head = snake[0];\n    const newHead = [head[0] + direction[0], head[1] + direction[1]];\n    const newSnake = snake.slice();\n    const eatFood = newHead[0] === food[0] && newHead[1] === food[1];\n\n    if (isGameOver(newHead, snake)) {\n      setDelay(null);\n      setDisplayStartButton('fullPage');\n      return;\n    }\n    if (eatFood) {\n      const nextFood = controlRandomFood(snake);\n      setScore(score + 1);\n      setFood(nextFood);\n      newSnake.unshift(newHead);\n      if (score % 3 === 0) {\n        setDelay(delay - 20);\n      }\n    } else {\n      newSnake.unshift(newHead);\n      newSnake.pop();\n    }\n    setSnake(newSnake);\n  }, delay);\n\n  useListener('keydown', (e) => {\n    handleDirectionBtn(e.code);\n  });\n\n  const handleDirectionBtn = (e) => {\n    switch (e) {\n      case 'ArrowUp':\n        if (direction[0] !== 0) {\n          setDirection([0, -1]);\n          setHeadDirectionClass('up');\n        }\n        break;\n      case 'ArrowDown':\n        if (direction[0] !== 0) {\n          setDirection([0, 1]);\n          setHeadDirectionClass('down');\n        }\n        break;\n      case 'ArrowLeft':\n        if (direction[1] !== 0) {\n          setDirection([-1, 0]);\n          setHeadDirectionClass('turnLeft');\n        }\n        break;\n      case 'ArrowRight':\n        if (direction[1] !== 0) {\n          setDirection([1, 0]);\n          setHeadDirectionClass('turnRight');\n        }\n        break;\n    }\n  };\n\n  return (\n    <div className=\"game\">\n      <div>\n        <ScoreBoard score={score} />\n        <Board\n          snake={snake}\n          food={food}\n          headDirectionClass={headDirectionClass}\n        />\n      </div>\n      <DirectionButton handleDirectionBtn={handleDirectionBtn} />\n      <StartButton\n        startGame={startGame}\n        displayStartButton={displayStartButton}\n      />\n    </div>\n  );\n}\n\nfunction ScoreBoard(props) {\n  return (\n    <div className=\"scoreBoard\">\n      Score\n      <span>{props.score}</span>\n    </div>\n  );\n}\n\nfunction Board(props) {\n  const columnArr = new Array(width).fill(null);\n  for (let i = 0; i < columnArr.length; i++) {\n    const rowArr = new Array(height).fill(null);\n    columnArr[i] = rowArr;\n  }\n\n  const isFood = 1;\n  const isSnake = 2;\n  const isSnakeHead = 3;\n  const [foodX, foodY] = props.food;\n  columnArr[foodX][foodY] = isFood;\n\n  props.snake.forEach((snakeArr, index) => {\n    const [snakeX, snakeY] = snakeArr;\n    if (index === 0) {\n      columnArr[snakeX][snakeY] = isSnakeHead;\n    } else {\n      columnArr[snakeX][snakeY] = isSnake;\n    }\n  });\n\n  return (\n    <div className=\"board\">\n      {columnArr.map((column, x) => {\n        return column.map((cell, y) => {\n          const k = `${x}${y}`;\n          if (cell === isFood) {\n            return <div key={k} className=\"unit food\"></div>;\n          }\n          if (cell === isSnake) {\n            return <div key={k} className=\"unit snake\"></div>;\n          }\n          if (cell === isSnakeHead) {\n            return (\n              <div\n                key={k}\n                className={`unit snakeHead ${props.headDirectionClass}`}\n              ></div>\n            );\n          }\n          return <div key={k} className=\"unit\"></div>;\n        });\n      })}\n    </div>\n  );\n}\n\nfunction StartButton(props) {\n  return (\n    <div className={props.displayStartButton}>\n      <button className=\"startButton\" onClick={props.startGame}>\n        start\n      </button>\n    </div>\n  );\n}\n\nfunction DirectionButton(props) {\n  return (\n    <div className=\"directionBtn\">\n      <button\n        onClick={() => props.handleDirectionBtn('ArrowUp')}\n        className=\"bnstyle ArrowUp\"\n      ></button>\n      <div className=\"leftRight\">\n        <button\n          onClick={() => props.handleDirectionBtn('ArrowLeft')}\n          className=\"bnstyle ArrowLeft\"\n        ></button>\n        <button\n          onClick={() => props.handleDirectionBtn('ArrowRight')}\n          className=\"bnstyle ArrowRight\"\n        ></button>\n      </div>\n      <button\n        onClick={() => props.handleDirectionBtn('ArrowDown')}\n        className=\"bnstyle ArrowDown\"\n      ></button>\n    </div>\n  );\n}\n\nconst useInterval = (callback, delay) => {\n  const savedCallback = useRef();\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    const tick = () => {\n      savedCallback.current();\n    };\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n};\n\nconst useListener = (type, callback) => {\n  const savedCallback = useRef();\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    const handle = (e) => {\n      savedCallback.current(e);\n    };\n    document.addEventListener(type, handle);\n    return () => document.removeEventListener(type, handle);\n  }, [type]);\n};\n\nconst controlRandomFood = (snake) => {\n  for (;;) {\n    let x = Math.floor(Math.random() * width);\n    let y = Math.floor(Math.random() * height);\n    const found = snake.find((element) => {\n      if (element[0] === x && element[1] === y) {\n        return true;\n      }\n    });\n    if (found === undefined) {\n      return [x, y];\n    }\n  }\n};\n\nconst isGameOver = (newHead, snake) => {\n  const borderWidth = width - 1;\n  const borderHeight = height - 1;\n  const overBorder =\n    newHead[0] > borderWidth ||\n    newHead[0] < 0 ||\n    newHead[1] > borderHeight ||\n    newHead[1] < 0;\n  const touchBody = snake.find((e) => {\n    if (e[0] === newHead[0] && e[1] === newHead[1]) {\n      return true;\n    }\n    return false;\n  });\n  return overBorder || touchBody;\n};\n\nfunction App() {\n  return (\n    <div>\n      <div className=\"forkmeongihub\">\n        <div>\n          <a href=\"https://github.com/jundesu/snake_game\">Fork me on Github</a>\n        </div>\n      </div>\n      <Game />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}