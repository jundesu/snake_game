{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["startFromHere","Game","useState","score","setScore","food","setFood","snake","setSnake","direction","setDirection","delay","setDelay","displayStartButton","setDisplayStartButton","headDirectionClass","setHeadDirectionClass","useInterval","head","newHead","newSnake","slice","eatFood","isGameOver","nextFood","controlRandomFood","unshift","pop","useListener","e","code","className","ScoreBoard","Board","StartButton","startGame","props","columnArr","Array","fill","i","length","rowArr","foodX","foodY","forEach","snakeArr","index","snakeX","snakeY","map","column","x","cell","y","k","onClick","callback","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","type","handle","document","addEventListener","removeEventListener","Math","floor","random","undefined","find","element","overBorder","width","height","touchBody","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.8491f043.chunk.js","sourcesContent":["import './App.css';\nimport React, { useEffect, useState, useRef } from 'react';\n\nconst width = 15;\nconst height = 15;\nconst startFromHere = [[7,4], [6,4], [5,4]];\n\nfunction Game() {\n  const [score,setScore] = useState(0);\n  const [food, setFood] = useState([10,10]);\n  const [snake, setSnake] = useState(startFromHere);\n  const [direction, setDirection] = useState([1,0]);\n  const [delay, setDelay] = useState(null);\n  const [displayStartButton, setDisplayStartButton] = useState('fullPage');\n  const [headDirectionClass, setHeadDirectionClass] = useState('turnRight');\n\n  const startGame = () => {\n    setDisplayStartButton('hidden');\n    setDelay(300);\n    setSnake(startFromHere);\n    setScore(0);\n    setDirection([1,0]);\n    setHeadDirectionClass('turnRight');\n  };\n\n  useInterval(() => {\n    const head = snake[0];\n    const newHead = [head[0] + direction[0], head[1] + direction[1]];\n    const newSnake = snake.slice();\n    const eatFood = newHead[0] === food[0] && newHead[1] === food[1];\n    \n    if(isGameOver(newHead, snake)) {\n      setDelay(null);\n      setDisplayStartButton('fullPage');\n      return\n    }\n    if(eatFood) {\n      const nextFood = controlRandomFood(snake);\n      setScore(score + 1);\n      setFood(nextFood);\n      newSnake.unshift(newHead);\n      if(score % 3 === 0) {\n        setDelay(delay - 50);\n      } \n    } else {\n      newSnake.unshift(newHead);\n      newSnake.pop();\n    }\n    setSnake(newSnake);\n  }, delay);\n\n  useListener('keydown', (e) => {\n    switch(e.code) {\n      case 'ArrowUp':\n        if(direction[0] !== 0) {\n          setDirection([0, -1]);\n          setHeadDirectionClass('up');\n        }\n        break;\n      case 'ArrowDown':\n        if(direction[0] !== 0) {\n          setDirection([0, 1]);\n          setHeadDirectionClass('down');\n        }\n        break;\n      case 'ArrowLeft':\n        if(direction[1] !== 0) {\n          setDirection([-1, 0]);\n          setHeadDirectionClass('turnLeft');\n        }\n        break;\n      case 'ArrowRight':\n        if(direction[1] !== 0) {\n          setDirection([1, 0]);\n          setHeadDirectionClass('turnRight');\n        }\n        break;\n    }\n  });\n\n  return (\n    <div className=\"game\">\n      <ScoreBoard score={score}/>\n      <Board snake={snake} food={food} headDirectionClass={headDirectionClass} />\n      <StartButton startGame={startGame} displayStartButton={displayStartButton} />\n    </div>\n  );\n}\n\nfunction ScoreBoard(props) {\n  return (\n    <div className=\"scoreBoard\">\n      Score\n      <span>{props.score}</span>\n    </div>\n  );\n}\n\nfunction Board(props) {\n  const columnArr = (new Array(width)).fill(null);\n  for(let i = 0; i < columnArr.length; i++) {\n    const rowArr = (new Array(height)).fill(null);\n    columnArr[i] = rowArr;\n  }\n  \n  const isFood = 1;\n  const isSnake = 2;\n  const isSnakeHead = 3;\n  const[foodX, foodY]= props.food;\n  columnArr[foodX][foodY] = isFood;\n\n  props.snake.forEach((snakeArr, index) => {\n    const [snakeX,snakeY] = snakeArr;\n    if(index === 0) {\n      columnArr[snakeX][snakeY] = isSnakeHead;\n    } else {\n      columnArr[snakeX][snakeY] = isSnake;\n    }\n  });\n \n  return (\n    <div className=\"board\">\n     {\n       columnArr.map((column, x) => {\n        return (\n          column.map((cell, y) => {\n            const k = `${x}${y}`\n            if(cell === isFood) {\n              return (<div key={k} className=\"unit food\"></div>)\n            }\n            if(cell === isSnake) {\n              return (<div key={k} className=\"unit snake\"></div>)\n            }\n            if(cell === isSnakeHead) {\n              return (<div key={k} className={`unit snakeHead ${props.headDirectionClass}`}></div>)\n            }\n            return (\n              <div key={k} className=\"unit\"></div>\n            );\n          })\n        );\n       })\n     }\n    </div>\n  );\n}\n\nfunction StartButton(props) {\n  return (\n    <div className={props.displayStartButton}>\n      <button className=\"startButton\" onClick={props.startGame}>start</button>\n    </div>\n  );\n}\n\nconst useInterval = (callback, delay) => {\n  const savedCallback = useRef();\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    const tick = () => {\n      savedCallback.current();\n    };\n    if(delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  },[delay]);\n}\n\nconst useListener = (type, callback) => {\n  const savedCallback = useRef();\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    const handle = (e) => {\n      savedCallback.current(e);\n    };\n    document.addEventListener(type, handle);\n    return () => document.removeEventListener(type, handle)\n  }, [type]);\n}\n\nconst controlRandomFood = (snake) => {\n  for(;;) {\n    let x = Math.floor(Math.random() * width);\n    let y = Math.floor(Math.random() * height);\n    const found = snake.find((element) => {\n      if(element[0] === x && element[1] === y) {\n        return true\n      }\n    });\n    if(found === undefined) {\n      return [x,y]\n    }\n  }  \n}\n\nconst isGameOver = (newHead, snake) => {\n  const borderWidth = width - 1;\n  const borderHeight = height -1;\n  const overBorder = newHead[0] > borderWidth || newHead[0] < 0 || newHead[1] > borderHeight || newHead[1] < 0;\n  const touchBody =  snake.find((e) => {\n    if(e[0] === newHead[0] && e[1] === newHead[1]) {\n      return true\n    }\n    return false\n  });\n  return overBorder || touchBody\n}\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Game />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}